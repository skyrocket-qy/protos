// @generated by protoc-gen-es v2.6.3
// @generated from file pkgpb/v1/pkg.proto (package pkgpb.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file pkgpb/v1/pkg.proto.
 */
export declare const file_pkgpb_v1_pkg: GenFile;

/**
 * @generated from message pkgpb.v1.Filter
 */
export declare type Filter = Message<"pkgpb.v1.Filter"> & {
  /**
   * e.g. "email", "created_at"
   *
   * @generated from field: string field = 1;
   */
  field: string;

  /**
   * @generated from field: pkgpb.v1.Operator op = 2;
   */
  op: Operator;

  /**
   * can hold 1 or 2 values depending on op
   *
   * @generated from field: repeated string values = 3;
   */
  values: string[];
};

/**
 * Describes the message pkgpb.v1.Filter.
 * Use `create(FilterSchema)` to create a new message.
 */
export declare const FilterSchema: GenMessage<Filter>;

/**
 * @generated from message pkgpb.v1.Sorter
 */
export declare type Sorter = Message<"pkgpb.v1.Sorter"> & {
  /**
   * @generated from field: string field = 1;
   */
  field: string;

  /**
   * @generated from field: bool asc = 2;
   */
  asc: boolean;
};

/**
 * Describes the message pkgpb.v1.Sorter.
 * Use `create(SorterSchema)` to create a new message.
 */
export declare const SorterSchema: GenMessage<Sorter>;

/**
 * @generated from message pkgpb.v1.Pager
 */
export declare type Pager = Message<"pkgpb.v1.Pager"> & {
  /**
   * @generated from field: int32 number = 1;
   */
  number: number;

  /**
   * @generated from field: int32 size = 2;
   */
  size: number;
};

/**
 * Describes the message pkgpb.v1.Pager.
 * Use `create(PagerSchema)` to create a new message.
 */
export declare const PagerSchema: GenMessage<Pager>;

/**
 * @generated from message pkgpb.v1.Cursor
 */
export declare type Cursor = Message<"pkgpb.v1.Cursor"> & {
  /**
   * @generated from field: optional bytes val = 1;
   */
  val?: Uint8Array;

  /**
   * @generated from field: int32 size = 2;
   */
  size: number;
};

/**
 * Describes the message pkgpb.v1.Cursor.
 * Use `create(CursorSchema)` to create a new message.
 */
export declare const CursorSchema: GenMessage<Cursor>;

/**
 * @generated from message pkgpb.v1.CursorData
 */
export declare type CursorData = Message<"pkgpb.v1.CursorData"> & {
  /**
   * @generated from field: repeated pkgpb.v1.Field fields = 1;
   */
  fields: Field[];
};

/**
 * Describes the message pkgpb.v1.CursorData.
 * Use `create(CursorDataSchema)` to create a new message.
 */
export declare const CursorDataSchema: GenMessage<CursorData>;

/**
 * @generated from message pkgpb.v1.Field
 */
export declare type Field = Message<"pkgpb.v1.Field"> & {
  /**
   * @generated from field: string col = 1;
   */
  col: string;

  /**
   * @generated from field: bool asc = 2;
   */
  asc: boolean;

  /**
   * @generated from field: string val = 3;
   */
  val: string;
};

/**
 * Describes the message pkgpb.v1.Field.
 * Use `create(FieldSchema)` to create a new message.
 */
export declare const FieldSchema: GenMessage<Field>;

/**
 * @generated from message pkgpb.v1.FilterNode
 */
export declare type FilterNode = Message<"pkgpb.v1.FilterNode"> & {
  /**
   * @generated from oneof pkgpb.v1.FilterNode.node
   */
  node: {
    /**
     * @generated from field: pkgpb.v1.Filter filter = 1;
     */
    value: Filter;
    case: "filter";
  } | {
    /**
     * @generated from field: pkgpb.v1.Logical logical = 2;
     */
    value: Logical;
    case: "logical";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message pkgpb.v1.FilterNode.
 * Use `create(FilterNodeSchema)` to create a new message.
 */
export declare const FilterNodeSchema: GenMessage<FilterNode>;

/**
 * @generated from message pkgpb.v1.Logical
 */
export declare type Logical = Message<"pkgpb.v1.Logical"> & {
  /**
   * @generated from field: pkgpb.v1.LogicOp op = 1;
   */
  op: LogicOp;

  /**
   * @generated from field: repeated pkgpb.v1.FilterNode nodes = 2;
   */
  nodes: FilterNode[];
};

/**
 * Describes the message pkgpb.v1.Logical.
 * Use `create(LogicalSchema)` to create a new message.
 */
export declare const LogicalSchema: GenMessage<Logical>;

/**
 * @generated from enum pkgpb.v1.Operator
 */
export enum Operator {
  /**
   * @generated from enum value: OPERATOR_UNSPECIFIED = 0;
   */
  OPERATOR_UNSPECIFIED = 0,

  /**
   * =
   *
   * @generated from enum value: EQ = 1;
   */
  EQ = 1,

  /**
   * !=
   *
   * @generated from enum value: NEQ = 2;
   */
  NEQ = 2,

  /**
   * >
   *
   * @generated from enum value: GT = 3;
   */
  GT = 3,

  /**
   * >=
   *
   * @generated from enum value: GTE = 4;
   */
  GTE = 4,

  /**
   * <
   *
   * @generated from enum value: LT = 5;
   */
  LT = 5,

  /**
   * <=
   *
   * @generated from enum value: LTE = 6;
   */
  LTE = 6,

  /**
   * IN (...)
   *
   * @generated from enum value: IN = 7;
   */
  IN = 7,

  /**
   * NOT IN (...)
   *
   * @generated from enum value: NOT_IN = 8;
   */
  NOT_IN = 8,

  /**
   * LIKE '...'
   *
   * @generated from enum value: LIKE = 9;
   */
  LIKE = 9,

  /**
   * ILIKE '...'
   *
   * @generated from enum value: ILIKE = 10;
   */
  ILIKE = 10,

  /**
   * @generated from enum value: IS_NULL = 11;
   */
  IS_NULL = 11,

  /**
   * @generated from enum value: IS_NOT_NULL = 12;
   */
  IS_NOT_NULL = 12,

  /**
   * @generated from enum value: BETWEEN = 13;
   */
  BETWEEN = 13,
}

/**
 * Describes the enum pkgpb.v1.Operator.
 */
export declare const OperatorSchema: GenEnum<Operator>;

/**
 * @generated from enum pkgpb.v1.LogicOp
 */
export enum LogicOp {
  /**
   * @generated from enum value: LOGIC_OP_UNSPECIFIED = 0;
   */
  LOGIC_OP_UNSPECIFIED = 0,

  /**
   * @generated from enum value: AND = 1;
   */
  AND = 1,

  /**
   * @generated from enum value: OR = 2;
   */
  OR = 2,

  /**
   * @generated from enum value: NOT = 3;
   */
  NOT = 3,
}

/**
 * Describes the enum pkgpb.v1.LogicOp.
 */
export declare const LogicOpSchema: GenEnum<LogicOp>;

