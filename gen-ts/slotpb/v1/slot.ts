// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: slotpb/v1/slot.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "slotpb.v1";

/** api.proto */

export enum JPType {
  JP_TYPE_UNSPECIFIED = 0,
  JP_TYPE_MINOR = 1,
  JP_TYPE_MAJOR = 2,
  JP_TYPE_GRAND = 3,
  UNRECOGNIZED = -1,
}

export function jPTypeFromJSON(object: any): JPType {
  switch (object) {
    case 0:
    case "JP_TYPE_UNSPECIFIED":
      return JPType.JP_TYPE_UNSPECIFIED;
    case 1:
    case "JP_TYPE_MINOR":
      return JPType.JP_TYPE_MINOR;
    case 2:
    case "JP_TYPE_MAJOR":
      return JPType.JP_TYPE_MAJOR;
    case 3:
    case "JP_TYPE_GRAND":
      return JPType.JP_TYPE_GRAND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return JPType.UNRECOGNIZED;
  }
}

export function jPTypeToJSON(object: JPType): string {
  switch (object) {
    case JPType.JP_TYPE_UNSPECIFIED:
      return "JP_TYPE_UNSPECIFIED";
    case JPType.JP_TYPE_MINOR:
      return "JP_TYPE_MINOR";
    case JPType.JP_TYPE_MAJOR:
      return "JP_TYPE_MAJOR";
    case JPType.JP_TYPE_GRAND:
      return "JP_TYPE_GRAND";
    case JPType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface GateWayRequest {
  requestId: string;
  opeCode: number;
  msg: Uint8Array;
}

export interface GateWayResponse {
  msg: Uint8Array;
}

export interface Table {
  reels: Reel[];
}

export interface Reel {
  symbols: string[];
}

export interface Coordinate {
  x: number;
  y: number;
}

export interface PlayOut {
  isJp: boolean;
  data: Uint8Array;
}

export interface JpOut {
  table: Table | undefined;
  score: number;
  type: JPType;
}

function createBaseGateWayRequest(): GateWayRequest {
  return { requestId: "", opeCode: 0, msg: new Uint8Array(0) };
}

export const GateWayRequest: MessageFns<GateWayRequest> = {
  encode(message: GateWayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.opeCode !== 0) {
      writer.uint32(16).uint32(message.opeCode);
    }
    if (message.msg.length !== 0) {
      writer.uint32(26).bytes(message.msg);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GateWayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGateWayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.opeCode = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msg = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GateWayRequest {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      opeCode: isSet(object.opeCode) ? globalThis.Number(object.opeCode) : 0,
      msg: isSet(object.msg) ? bytesFromBase64(object.msg) : new Uint8Array(0),
    };
  },

  toJSON(message: GateWayRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.opeCode !== 0) {
      obj.opeCode = Math.round(message.opeCode);
    }
    if (message.msg.length !== 0) {
      obj.msg = base64FromBytes(message.msg);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GateWayRequest>, I>>(base?: I): GateWayRequest {
    return GateWayRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GateWayRequest>, I>>(object: I): GateWayRequest {
    const message = createBaseGateWayRequest();
    message.requestId = object.requestId ?? "";
    message.opeCode = object.opeCode ?? 0;
    message.msg = object.msg ?? new Uint8Array(0);
    return message;
  },
};

function createBaseGateWayResponse(): GateWayResponse {
  return { msg: new Uint8Array(0) };
}

export const GateWayResponse: MessageFns<GateWayResponse> = {
  encode(message: GateWayResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.msg.length !== 0) {
      writer.uint32(10).bytes(message.msg);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GateWayResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGateWayResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.msg = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GateWayResponse {
    return { msg: isSet(object.msg) ? bytesFromBase64(object.msg) : new Uint8Array(0) };
  },

  toJSON(message: GateWayResponse): unknown {
    const obj: any = {};
    if (message.msg.length !== 0) {
      obj.msg = base64FromBytes(message.msg);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GateWayResponse>, I>>(base?: I): GateWayResponse {
    return GateWayResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GateWayResponse>, I>>(object: I): GateWayResponse {
    const message = createBaseGateWayResponse();
    message.msg = object.msg ?? new Uint8Array(0);
    return message;
  },
};

function createBaseTable(): Table {
  return { reels: [] };
}

export const Table: MessageFns<Table> = {
  encode(message: Table, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.reels) {
      Reel.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Table {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reels.push(Reel.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Table {
    return { reels: globalThis.Array.isArray(object?.reels) ? object.reels.map((e: any) => Reel.fromJSON(e)) : [] };
  },

  toJSON(message: Table): unknown {
    const obj: any = {};
    if (message.reels?.length) {
      obj.reels = message.reels.map((e) => Reel.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Table>, I>>(base?: I): Table {
    return Table.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Table>, I>>(object: I): Table {
    const message = createBaseTable();
    message.reels = object.reels?.map((e) => Reel.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReel(): Reel {
  return { symbols: [] };
}

export const Reel: MessageFns<Reel> = {
  encode(message: Reel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.symbols) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Reel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.symbols.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Reel {
    return {
      symbols: globalThis.Array.isArray(object?.symbols) ? object.symbols.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Reel): unknown {
    const obj: any = {};
    if (message.symbols?.length) {
      obj.symbols = message.symbols;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Reel>, I>>(base?: I): Reel {
    return Reel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Reel>, I>>(object: I): Reel {
    const message = createBaseReel();
    message.symbols = object.symbols?.map((e) => e) || [];
    return message;
  },
};

function createBaseCoordinate(): Coordinate {
  return { x: 0, y: 0 };
}

export const Coordinate: MessageFns<Coordinate> = {
  encode(message: Coordinate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(8).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).int32(message.y);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Coordinate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCoordinate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.x = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.y = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Coordinate {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: Coordinate): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Coordinate>, I>>(base?: I): Coordinate {
    return Coordinate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Coordinate>, I>>(object: I): Coordinate {
    const message = createBaseCoordinate();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

function createBasePlayOut(): PlayOut {
  return { isJp: false, data: new Uint8Array(0) };
}

export const PlayOut: MessageFns<PlayOut> = {
  encode(message: PlayOut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isJp !== false) {
      writer.uint32(8).bool(message.isJp);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayOut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayOut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isJp = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayOut {
    return {
      isJp: isSet(object.isJp) ? globalThis.Boolean(object.isJp) : false,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: PlayOut): unknown {
    const obj: any = {};
    if (message.isJp !== false) {
      obj.isJp = message.isJp;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayOut>, I>>(base?: I): PlayOut {
    return PlayOut.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayOut>, I>>(object: I): PlayOut {
    const message = createBasePlayOut();
    message.isJp = object.isJp ?? false;
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseJpOut(): JpOut {
  return { table: undefined, score: 0, type: 0 };
}

export const JpOut: MessageFns<JpOut> = {
  encode(message: JpOut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.table !== undefined) {
      Table.encode(message.table, writer.uint32(10).fork()).join();
    }
    if (message.score !== 0) {
      writer.uint32(16).uint64(message.score);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JpOut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJpOut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.table = Table.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.score = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JpOut {
    return {
      table: isSet(object.table) ? Table.fromJSON(object.table) : undefined,
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      type: isSet(object.type) ? jPTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: JpOut): unknown {
    const obj: any = {};
    if (message.table !== undefined) {
      obj.table = Table.toJSON(message.table);
    }
    if (message.score !== 0) {
      obj.score = Math.round(message.score);
    }
    if (message.type !== 0) {
      obj.type = jPTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JpOut>, I>>(base?: I): JpOut {
    return JpOut.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JpOut>, I>>(object: I): JpOut {
    const message = createBaseJpOut();
    message.table = (object.table !== undefined && object.table !== null) ? Table.fromPartial(object.table) : undefined;
    message.score = object.score ?? 0;
    message.type = object.type ?? 0;
    return message;
  },
};

export interface SlotService {
  GateWay(request: GateWayRequest): Promise<GateWayResponse>;
}

export const SlotServiceServiceName = "slotpb.v1.SlotService";
export class SlotServiceClientImpl implements SlotService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || SlotServiceServiceName;
    this.rpc = rpc;
    this.GateWay = this.GateWay.bind(this);
  }
  GateWay(request: GateWayRequest): Promise<GateWayResponse> {
    const data = GateWayRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GateWay", data);
    return promise.then((data) => GateWayResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
