// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: pkgpb/v1/pkg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "pkgpb.v1";

export enum Operator {
  OPERATOR_UNSPECIFIED = 0,
  /** OPERATOR_EQ - = */
  OPERATOR_EQ = 1,
  /** OPERATOR_GT - > */
  OPERATOR_GT = 2,
  /** OPERATOR_GTE - >= */
  OPERATOR_GTE = 3,
  /** OPERATOR_LT - < */
  OPERATOR_LT = 4,
  /** OPERATOR_LTE - <= */
  OPERATOR_LTE = 5,
  /** OPERATOR_BETWEEN - between [val1, val2) */
  OPERATOR_BETWEEN = 6,
  UNRECOGNIZED = -1,
}

export function operatorFromJSON(object: any): Operator {
  switch (object) {
    case 0:
    case "OPERATOR_UNSPECIFIED":
      return Operator.OPERATOR_UNSPECIFIED;
    case 1:
    case "OPERATOR_EQ":
      return Operator.OPERATOR_EQ;
    case 2:
    case "OPERATOR_GT":
      return Operator.OPERATOR_GT;
    case 3:
    case "OPERATOR_GTE":
      return Operator.OPERATOR_GTE;
    case 4:
    case "OPERATOR_LT":
      return Operator.OPERATOR_LT;
    case 5:
    case "OPERATOR_LTE":
      return Operator.OPERATOR_LTE;
    case 6:
    case "OPERATOR_BETWEEN":
      return Operator.OPERATOR_BETWEEN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Operator.UNRECOGNIZED;
  }
}

export function operatorToJSON(object: Operator): string {
  switch (object) {
    case Operator.OPERATOR_UNSPECIFIED:
      return "OPERATOR_UNSPECIFIED";
    case Operator.OPERATOR_EQ:
      return "OPERATOR_EQ";
    case Operator.OPERATOR_GT:
      return "OPERATOR_GT";
    case Operator.OPERATOR_GTE:
      return "OPERATOR_GTE";
    case Operator.OPERATOR_LT:
      return "OPERATOR_LT";
    case Operator.OPERATOR_LTE:
      return "OPERATOR_LTE";
    case Operator.OPERATOR_BETWEEN:
      return "OPERATOR_BETWEEN";
    case Operator.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Filter {
  /** e.g. "email", "created_at" */
  field: string;
  op: Operator;
  /** can hold 1 or 2 values depending on op */
  values: string[];
}

export interface Sorter {
  field: string;
  asc: boolean;
}

export interface Pager {
  number: number;
  size: number;
}

function createBaseFilter(): Filter {
  return { field: "", op: 0, values: [] };
}

export const Filter: MessageFns<Filter> = {
  encode(message: Filter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field !== "") {
      writer.uint32(10).string(message.field);
    }
    if (message.op !== 0) {
      writer.uint32(16).int32(message.op);
    }
    for (const v of message.values) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Filter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.field = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.op = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.values.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Filter {
    return {
      field: isSet(object.field) ? globalThis.String(object.field) : "",
      op: isSet(object.op) ? operatorFromJSON(object.op) : 0,
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Filter): unknown {
    const obj: any = {};
    if (message.field !== "") {
      obj.field = message.field;
    }
    if (message.op !== 0) {
      obj.op = operatorToJSON(message.op);
    }
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Filter>, I>>(base?: I): Filter {
    return Filter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Filter>, I>>(object: I): Filter {
    const message = createBaseFilter();
    message.field = object.field ?? "";
    message.op = object.op ?? 0;
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseSorter(): Sorter {
  return { field: "", asc: false };
}

export const Sorter: MessageFns<Sorter> = {
  encode(message: Sorter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field !== "") {
      writer.uint32(10).string(message.field);
    }
    if (message.asc !== false) {
      writer.uint32(16).bool(message.asc);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Sorter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSorter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.field = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.asc = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Sorter {
    return {
      field: isSet(object.field) ? globalThis.String(object.field) : "",
      asc: isSet(object.asc) ? globalThis.Boolean(object.asc) : false,
    };
  },

  toJSON(message: Sorter): unknown {
    const obj: any = {};
    if (message.field !== "") {
      obj.field = message.field;
    }
    if (message.asc !== false) {
      obj.asc = message.asc;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Sorter>, I>>(base?: I): Sorter {
    return Sorter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Sorter>, I>>(object: I): Sorter {
    const message = createBaseSorter();
    message.field = object.field ?? "";
    message.asc = object.asc ?? false;
    return message;
  },
};

function createBasePager(): Pager {
  return { number: 0, size: 0 };
}

export const Pager: MessageFns<Pager> = {
  encode(message: Pager, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.number !== 0) {
      writer.uint32(8).int32(message.number);
    }
    if (message.size !== 0) {
      writer.uint32(16).int32(message.size);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Pager {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePager();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.number = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.size = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Pager {
    return {
      number: isSet(object.number) ? globalThis.Number(object.number) : 0,
      size: isSet(object.size) ? globalThis.Number(object.size) : 0,
    };
  },

  toJSON(message: Pager): unknown {
    const obj: any = {};
    if (message.number !== 0) {
      obj.number = Math.round(message.number);
    }
    if (message.size !== 0) {
      obj.size = Math.round(message.size);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Pager>, I>>(base?: I): Pager {
    return Pager.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Pager>, I>>(object: I): Pager {
    const message = createBasePager();
    message.number = object.number ?? 0;
    message.size = object.size ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
