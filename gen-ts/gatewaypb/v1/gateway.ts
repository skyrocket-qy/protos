// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: gatewaypb/v1/gateway.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "gatewaypb.v1";

/** api.proto */

export interface GateWayRequest {
  requestId: string;
  opeCode: number;
  msg: Uint8Array;
}

export interface GateWayResponse {
  requestId: string;
  msg: Uint8Array;
}

function createBaseGateWayRequest(): GateWayRequest {
  return { requestId: "", opeCode: 0, msg: new Uint8Array(0) };
}

export const GateWayRequest: MessageFns<GateWayRequest> = {
  encode(message: GateWayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.opeCode !== 0) {
      writer.uint32(16).uint32(message.opeCode);
    }
    if (message.msg.length !== 0) {
      writer.uint32(26).bytes(message.msg);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GateWayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGateWayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.opeCode = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.msg = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GateWayRequest {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      opeCode: isSet(object.opeCode) ? globalThis.Number(object.opeCode) : 0,
      msg: isSet(object.msg) ? bytesFromBase64(object.msg) : new Uint8Array(0),
    };
  },

  toJSON(message: GateWayRequest): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.opeCode !== 0) {
      obj.opeCode = Math.round(message.opeCode);
    }
    if (message.msg.length !== 0) {
      obj.msg = base64FromBytes(message.msg);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GateWayRequest>, I>>(base?: I): GateWayRequest {
    return GateWayRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GateWayRequest>, I>>(object: I): GateWayRequest {
    const message = createBaseGateWayRequest();
    message.requestId = object.requestId ?? "";
    message.opeCode = object.opeCode ?? 0;
    message.msg = object.msg ?? new Uint8Array(0);
    return message;
  },
};

function createBaseGateWayResponse(): GateWayResponse {
  return { requestId: "", msg: new Uint8Array(0) };
}

export const GateWayResponse: MessageFns<GateWayResponse> = {
  encode(message: GateWayResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    if (message.msg.length !== 0) {
      writer.uint32(18).bytes(message.msg);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GateWayResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGateWayResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.msg = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GateWayResponse {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      msg: isSet(object.msg) ? bytesFromBase64(object.msg) : new Uint8Array(0),
    };
  },

  toJSON(message: GateWayResponse): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.msg.length !== 0) {
      obj.msg = base64FromBytes(message.msg);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GateWayResponse>, I>>(base?: I): GateWayResponse {
    return GateWayResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GateWayResponse>, I>>(object: I): GateWayResponse {
    const message = createBaseGateWayResponse();
    message.requestId = object.requestId ?? "";
    message.msg = object.msg ?? new Uint8Array(0);
    return message;
  },
};

export interface GateWayService {
  GateWay(request: GateWayRequest): Promise<GateWayResponse>;
}

export const GateWayServiceServiceName = "gatewaypb.v1.GateWayService";
export class GateWayServiceClientImpl implements GateWayService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || GateWayServiceServiceName;
    this.rpc = rpc;
    this.GateWay = this.GateWay.bind(this);
  }
  GateWay(request: GateWayRequest): Promise<GateWayResponse> {
    const data = GateWayRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GateWay", data);
    return promise.then((data) => GateWayResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
