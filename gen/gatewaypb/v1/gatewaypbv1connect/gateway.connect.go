// api.proto

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gatewaypb/v1/gateway.proto

package gatewaypbv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/skyrocket-qy/protos/gen/gatewaypb/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GateWayServiceName is the fully-qualified name of the GateWayService service.
	GateWayServiceName = "gatewaypb.v1.GateWayService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GateWayServiceGateWayProcedure is the fully-qualified name of the GateWayService's GateWay RPC.
	GateWayServiceGateWayProcedure = "/gatewaypb.v1.GateWayService/GateWay"
)

// GateWayServiceClient is a client for the gatewaypb.v1.GateWayService service.
type GateWayServiceClient interface {
	GateWay(context.Context, *connect.Request[v1.GateWayRequest]) (*connect.Response[v1.GateWayResponse], error)
}

// NewGateWayServiceClient constructs a client for the gatewaypb.v1.GateWayService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGateWayServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GateWayServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	gateWayServiceMethods := v1.File_gatewaypb_v1_gateway_proto.Services().ByName("GateWayService").Methods()
	return &gateWayServiceClient{
		gateWay: connect.NewClient[v1.GateWayRequest, v1.GateWayResponse](
			httpClient,
			baseURL+GateWayServiceGateWayProcedure,
			connect.WithSchema(gateWayServiceMethods.ByName("GateWay")),
			connect.WithClientOptions(opts...),
		),
	}
}

// gateWayServiceClient implements GateWayServiceClient.
type gateWayServiceClient struct {
	gateWay *connect.Client[v1.GateWayRequest, v1.GateWayResponse]
}

// GateWay calls gatewaypb.v1.GateWayService.GateWay.
func (c *gateWayServiceClient) GateWay(ctx context.Context, req *connect.Request[v1.GateWayRequest]) (*connect.Response[v1.GateWayResponse], error) {
	return c.gateWay.CallUnary(ctx, req)
}

// GateWayServiceHandler is an implementation of the gatewaypb.v1.GateWayService service.
type GateWayServiceHandler interface {
	GateWay(context.Context, *connect.Request[v1.GateWayRequest]) (*connect.Response[v1.GateWayResponse], error)
}

// NewGateWayServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGateWayServiceHandler(svc GateWayServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gateWayServiceMethods := v1.File_gatewaypb_v1_gateway_proto.Services().ByName("GateWayService").Methods()
	gateWayServiceGateWayHandler := connect.NewUnaryHandler(
		GateWayServiceGateWayProcedure,
		svc.GateWay,
		connect.WithSchema(gateWayServiceMethods.ByName("GateWay")),
		connect.WithHandlerOptions(opts...),
	)
	return "/gatewaypb.v1.GateWayService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GateWayServiceGateWayProcedure:
			gateWayServiceGateWayHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGateWayServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGateWayServiceHandler struct{}

func (UnimplementedGateWayServiceHandler) GateWay(context.Context, *connect.Request[v1.GateWayRequest]) (*connect.Response[v1.GateWayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gatewaypb.v1.GateWayService.GateWay is not implemented"))
}
