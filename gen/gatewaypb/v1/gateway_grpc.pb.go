// api.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gatewaypb/v1/gateway.proto

package gatewaypbv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GateWayService_GateWay_FullMethodName = "/gatewaypb.v1.GateWayService/GateWay"
)

// GateWayServiceClient is the client API for GateWayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GateWayServiceClient interface {
	GateWay(ctx context.Context, in *GateWayRequest, opts ...grpc.CallOption) (*GateWayResponse, error)
}

type gateWayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGateWayServiceClient(cc grpc.ClientConnInterface) GateWayServiceClient {
	return &gateWayServiceClient{cc}
}

func (c *gateWayServiceClient) GateWay(ctx context.Context, in *GateWayRequest, opts ...grpc.CallOption) (*GateWayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GateWayResponse)
	err := c.cc.Invoke(ctx, GateWayService_GateWay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GateWayServiceServer is the server API for GateWayService service.
// All implementations must embed UnimplementedGateWayServiceServer
// for forward compatibility.
type GateWayServiceServer interface {
	GateWay(context.Context, *GateWayRequest) (*GateWayResponse, error)
	mustEmbedUnimplementedGateWayServiceServer()
}

// UnimplementedGateWayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGateWayServiceServer struct{}

func (UnimplementedGateWayServiceServer) GateWay(context.Context, *GateWayRequest) (*GateWayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GateWay not implemented")
}
func (UnimplementedGateWayServiceServer) mustEmbedUnimplementedGateWayServiceServer() {}
func (UnimplementedGateWayServiceServer) testEmbeddedByValue()                        {}

// UnsafeGateWayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GateWayServiceServer will
// result in compilation errors.
type UnsafeGateWayServiceServer interface {
	mustEmbedUnimplementedGateWayServiceServer()
}

func RegisterGateWayServiceServer(s grpc.ServiceRegistrar, srv GateWayServiceServer) {
	// If the following call pancis, it indicates UnimplementedGateWayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GateWayService_ServiceDesc, srv)
}

func _GateWayService_GateWay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateWayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateWayServiceServer).GateWay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GateWayService_GateWay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateWayServiceServer).GateWay(ctx, req.(*GateWayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GateWayService_ServiceDesc is the grpc.ServiceDesc for GateWayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GateWayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gatewaypb.v1.GateWayService",
	HandlerType: (*GateWayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GateWay",
			Handler:    _GateWayService_GateWay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gatewaypb/v1/gateway.proto",
}
