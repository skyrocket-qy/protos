// api.proto

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: slotpb/v1/slot.proto

package slotpbv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/skyrocket-qy/protos/gen/slotpb/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SlotServiceName is the fully-qualified name of the SlotService service.
	SlotServiceName = "slotpb.v1.SlotService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SlotServiceGateWayProcedure is the fully-qualified name of the SlotService's GateWay RPC.
	SlotServiceGateWayProcedure = "/slotpb.v1.SlotService/GateWay"
)

// SlotServiceClient is a client for the slotpb.v1.SlotService service.
type SlotServiceClient interface {
	GateWay(context.Context, *connect.Request[v1.GateWayRequest]) (*connect.Response[v1.GateWayResponse], error)
}

// NewSlotServiceClient constructs a client for the slotpb.v1.SlotService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSlotServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SlotServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	slotServiceMethods := v1.File_slotpb_v1_slot_proto.Services().ByName("SlotService").Methods()
	return &slotServiceClient{
		gateWay: connect.NewClient[v1.GateWayRequest, v1.GateWayResponse](
			httpClient,
			baseURL+SlotServiceGateWayProcedure,
			connect.WithSchema(slotServiceMethods.ByName("GateWay")),
			connect.WithClientOptions(opts...),
		),
	}
}

// slotServiceClient implements SlotServiceClient.
type slotServiceClient struct {
	gateWay *connect.Client[v1.GateWayRequest, v1.GateWayResponse]
}

// GateWay calls slotpb.v1.SlotService.GateWay.
func (c *slotServiceClient) GateWay(ctx context.Context, req *connect.Request[v1.GateWayRequest]) (*connect.Response[v1.GateWayResponse], error) {
	return c.gateWay.CallUnary(ctx, req)
}

// SlotServiceHandler is an implementation of the slotpb.v1.SlotService service.
type SlotServiceHandler interface {
	GateWay(context.Context, *connect.Request[v1.GateWayRequest]) (*connect.Response[v1.GateWayResponse], error)
}

// NewSlotServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSlotServiceHandler(svc SlotServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	slotServiceMethods := v1.File_slotpb_v1_slot_proto.Services().ByName("SlotService").Methods()
	slotServiceGateWayHandler := connect.NewUnaryHandler(
		SlotServiceGateWayProcedure,
		svc.GateWay,
		connect.WithSchema(slotServiceMethods.ByName("GateWay")),
		connect.WithHandlerOptions(opts...),
	)
	return "/slotpb.v1.SlotService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SlotServiceGateWayProcedure:
			slotServiceGateWayHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSlotServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSlotServiceHandler struct{}

func (UnimplementedSlotServiceHandler) GateWay(context.Context, *connect.Request[v1.GateWayRequest]) (*connect.Response[v1.GateWayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("slotpb.v1.SlotService.GateWay is not implemented"))
}
