// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: authzpb/v1/authz.proto

package authzpbv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/skyrocket-qy/protos/gen/authzpb/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthzServiceName is the fully-qualified name of the AuthzService service.
	AuthzServiceName = "authzpb.v1.AuthzService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthzServiceCreateTupleProcedure is the fully-qualified name of the AuthzService's CreateTuple
	// RPC.
	AuthzServiceCreateTupleProcedure = "/authzpb.v1.AuthzService/CreateTuple"
	// AuthzServiceListTuplesProcedure is the fully-qualified name of the AuthzService's ListTuples RPC.
	AuthzServiceListTuplesProcedure = "/authzpb.v1.AuthzService/ListTuples"
	// AuthzServiceDeleteTuplesProcedure is the fully-qualified name of the AuthzService's DeleteTuples
	// RPC.
	AuthzServiceDeleteTuplesProcedure = "/authzpb.v1.AuthzService/DeleteTuples"
	// AuthzServiceCheckProcedure is the fully-qualified name of the AuthzService's Check RPC.
	AuthzServiceCheckProcedure = "/authzpb.v1.AuthzService/Check"
)

// AuthzServiceClient is a client for the authzpb.v1.AuthzService service.
type AuthzServiceClient interface {
	CreateTuple(context.Context, *connect.Request[v1.Tuple]) (*connect.Response[emptypb.Empty], error)
	ListTuples(context.Context, *connect.Request[v1.ListTuplesIn]) (*connect.Response[v1.ListTuplesOut], error)
	DeleteTuples(context.Context, *connect.Request[v1.DeleteTuplesIn]) (*connect.Response[emptypb.Empty], error)
	Check(context.Context, *connect.Request[v1.CheckIn]) (*connect.Response[v1.CheckOut], error)
}

// NewAuthzServiceClient constructs a client for the authzpb.v1.AuthzService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthzServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthzServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authzServiceMethods := v1.File_authzpb_v1_authz_proto.Services().ByName("AuthzService").Methods()
	return &authzServiceClient{
		createTuple: connect.NewClient[v1.Tuple, emptypb.Empty](
			httpClient,
			baseURL+AuthzServiceCreateTupleProcedure,
			connect.WithSchema(authzServiceMethods.ByName("CreateTuple")),
			connect.WithClientOptions(opts...),
		),
		listTuples: connect.NewClient[v1.ListTuplesIn, v1.ListTuplesOut](
			httpClient,
			baseURL+AuthzServiceListTuplesProcedure,
			connect.WithSchema(authzServiceMethods.ByName("ListTuples")),
			connect.WithClientOptions(opts...),
		),
		deleteTuples: connect.NewClient[v1.DeleteTuplesIn, emptypb.Empty](
			httpClient,
			baseURL+AuthzServiceDeleteTuplesProcedure,
			connect.WithSchema(authzServiceMethods.ByName("DeleteTuples")),
			connect.WithClientOptions(opts...),
		),
		check: connect.NewClient[v1.CheckIn, v1.CheckOut](
			httpClient,
			baseURL+AuthzServiceCheckProcedure,
			connect.WithSchema(authzServiceMethods.ByName("Check")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authzServiceClient implements AuthzServiceClient.
type authzServiceClient struct {
	createTuple  *connect.Client[v1.Tuple, emptypb.Empty]
	listTuples   *connect.Client[v1.ListTuplesIn, v1.ListTuplesOut]
	deleteTuples *connect.Client[v1.DeleteTuplesIn, emptypb.Empty]
	check        *connect.Client[v1.CheckIn, v1.CheckOut]
}

// CreateTuple calls authzpb.v1.AuthzService.CreateTuple.
func (c *authzServiceClient) CreateTuple(ctx context.Context, req *connect.Request[v1.Tuple]) (*connect.Response[emptypb.Empty], error) {
	return c.createTuple.CallUnary(ctx, req)
}

// ListTuples calls authzpb.v1.AuthzService.ListTuples.
func (c *authzServiceClient) ListTuples(ctx context.Context, req *connect.Request[v1.ListTuplesIn]) (*connect.Response[v1.ListTuplesOut], error) {
	return c.listTuples.CallUnary(ctx, req)
}

// DeleteTuples calls authzpb.v1.AuthzService.DeleteTuples.
func (c *authzServiceClient) DeleteTuples(ctx context.Context, req *connect.Request[v1.DeleteTuplesIn]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteTuples.CallUnary(ctx, req)
}

// Check calls authzpb.v1.AuthzService.Check.
func (c *authzServiceClient) Check(ctx context.Context, req *connect.Request[v1.CheckIn]) (*connect.Response[v1.CheckOut], error) {
	return c.check.CallUnary(ctx, req)
}

// AuthzServiceHandler is an implementation of the authzpb.v1.AuthzService service.
type AuthzServiceHandler interface {
	CreateTuple(context.Context, *connect.Request[v1.Tuple]) (*connect.Response[emptypb.Empty], error)
	ListTuples(context.Context, *connect.Request[v1.ListTuplesIn]) (*connect.Response[v1.ListTuplesOut], error)
	DeleteTuples(context.Context, *connect.Request[v1.DeleteTuplesIn]) (*connect.Response[emptypb.Empty], error)
	Check(context.Context, *connect.Request[v1.CheckIn]) (*connect.Response[v1.CheckOut], error)
}

// NewAuthzServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthzServiceHandler(svc AuthzServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authzServiceMethods := v1.File_authzpb_v1_authz_proto.Services().ByName("AuthzService").Methods()
	authzServiceCreateTupleHandler := connect.NewUnaryHandler(
		AuthzServiceCreateTupleProcedure,
		svc.CreateTuple,
		connect.WithSchema(authzServiceMethods.ByName("CreateTuple")),
		connect.WithHandlerOptions(opts...),
	)
	authzServiceListTuplesHandler := connect.NewUnaryHandler(
		AuthzServiceListTuplesProcedure,
		svc.ListTuples,
		connect.WithSchema(authzServiceMethods.ByName("ListTuples")),
		connect.WithHandlerOptions(opts...),
	)
	authzServiceDeleteTuplesHandler := connect.NewUnaryHandler(
		AuthzServiceDeleteTuplesProcedure,
		svc.DeleteTuples,
		connect.WithSchema(authzServiceMethods.ByName("DeleteTuples")),
		connect.WithHandlerOptions(opts...),
	)
	authzServiceCheckHandler := connect.NewUnaryHandler(
		AuthzServiceCheckProcedure,
		svc.Check,
		connect.WithSchema(authzServiceMethods.ByName("Check")),
		connect.WithHandlerOptions(opts...),
	)
	return "/authzpb.v1.AuthzService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthzServiceCreateTupleProcedure:
			authzServiceCreateTupleHandler.ServeHTTP(w, r)
		case AuthzServiceListTuplesProcedure:
			authzServiceListTuplesHandler.ServeHTTP(w, r)
		case AuthzServiceDeleteTuplesProcedure:
			authzServiceDeleteTuplesHandler.ServeHTTP(w, r)
		case AuthzServiceCheckProcedure:
			authzServiceCheckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthzServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthzServiceHandler struct{}

func (UnimplementedAuthzServiceHandler) CreateTuple(context.Context, *connect.Request[v1.Tuple]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.v1.AuthzService.CreateTuple is not implemented"))
}

func (UnimplementedAuthzServiceHandler) ListTuples(context.Context, *connect.Request[v1.ListTuplesIn]) (*connect.Response[v1.ListTuplesOut], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.v1.AuthzService.ListTuples is not implemented"))
}

func (UnimplementedAuthzServiceHandler) DeleteTuples(context.Context, *connect.Request[v1.DeleteTuplesIn]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.v1.AuthzService.DeleteTuples is not implemented"))
}

func (UnimplementedAuthzServiceHandler) Check(context.Context, *connect.Request[v1.CheckIn]) (*connect.Response[v1.CheckOut], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.v1.AuthzService.Check is not implemented"))
}
