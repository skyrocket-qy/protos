// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: authzpb/rbacpb/rbac.proto

package rbacpbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	rbacpb "github.com/skyrocket-qy/protos/gen/authzpb/rbacpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RbacServiceName is the fully-qualified name of the RbacService service.
	RbacServiceName = "authzpb.rbacpb.RbacService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RbacServiceListUsersProcedure is the fully-qualified name of the RbacService's ListUsers RPC.
	RbacServiceListUsersProcedure = "/authzpb.rbacpb.RbacService/ListUsers"
	// RbacServiceUpdateUserProcedure is the fully-qualified name of the RbacService's UpdateUser RPC.
	RbacServiceUpdateUserProcedure = "/authzpb.rbacpb.RbacService/UpdateUser"
	// RbacServiceDeleteUserProcedure is the fully-qualified name of the RbacService's DeleteUser RPC.
	RbacServiceDeleteUserProcedure = "/authzpb.rbacpb.RbacService/DeleteUser"
	// RbacServiceCreateRoleProcedure is the fully-qualified name of the RbacService's CreateRole RPC.
	RbacServiceCreateRoleProcedure = "/authzpb.rbacpb.RbacService/CreateRole"
	// RbacServiceListRolesProcedure is the fully-qualified name of the RbacService's ListRoles RPC.
	RbacServiceListRolesProcedure = "/authzpb.rbacpb.RbacService/ListRoles"
	// RbacServiceUpdateRoleProcedure is the fully-qualified name of the RbacService's UpdateRole RPC.
	RbacServiceUpdateRoleProcedure = "/authzpb.rbacpb.RbacService/UpdateRole"
	// RbacServiceDeleteRoleProcedure is the fully-qualified name of the RbacService's DeleteRole RPC.
	RbacServiceDeleteRoleProcedure = "/authzpb.rbacpb.RbacService/DeleteRole"
	// RbacServiceCreateResourceProcedure is the fully-qualified name of the RbacService's
	// CreateResource RPC.
	RbacServiceCreateResourceProcedure = "/authzpb.rbacpb.RbacService/CreateResource"
	// RbacServiceListResourcesProcedure is the fully-qualified name of the RbacService's ListResources
	// RPC.
	RbacServiceListResourcesProcedure = "/authzpb.rbacpb.RbacService/ListResources"
	// RbacServiceDeleteResourceProcedure is the fully-qualified name of the RbacService's
	// DeleteResource RPC.
	RbacServiceDeleteResourceProcedure = "/authzpb.rbacpb.RbacService/DeleteResource"
	// RbacServiceAssignRoleProcedure is the fully-qualified name of the RbacService's AssignRole RPC.
	RbacServiceAssignRoleProcedure = "/authzpb.rbacpb.RbacService/AssignRole"
	// RbacServiceRevokeRoleProcedure is the fully-qualified name of the RbacService's RevokeRole RPC.
	RbacServiceRevokeRoleProcedure = "/authzpb.rbacpb.RbacService/RevokeRole"
	// RbacServiceGrantPermProcedure is the fully-qualified name of the RbacService's GrantPerm RPC.
	RbacServiceGrantPermProcedure = "/authzpb.rbacpb.RbacService/GrantPerm"
	// RbacServiceRevokePermProcedure is the fully-qualified name of the RbacService's RevokePerm RPC.
	RbacServiceRevokePermProcedure = "/authzpb.rbacpb.RbacService/RevokePerm"
)

// RbacServiceClient is a client for the authzpb.rbacpb.RbacService service.
type RbacServiceClient interface {
	ListUsers(context.Context, *connect.Request[rbacpb.ListUsersIn]) (*connect.Response[rbacpb.ListUsersOut], error)
	UpdateUser(context.Context, *connect.Request[rbacpb.UpdateUserIn]) (*connect.Response[emptypb.Empty], error)
	DeleteUser(context.Context, *connect.Request[rbacpb.DeleteUserIn]) (*connect.Response[emptypb.Empty], error)
	CreateRole(context.Context, *connect.Request[rbacpb.CreateRoleIn]) (*connect.Response[emptypb.Empty], error)
	ListRoles(context.Context, *connect.Request[rbacpb.ListRolesIn]) (*connect.Response[rbacpb.ListRolesOut], error)
	UpdateRole(context.Context, *connect.Request[rbacpb.UpdateRoleIn]) (*connect.Response[emptypb.Empty], error)
	DeleteRole(context.Context, *connect.Request[rbacpb.DeleteRoleIn]) (*connect.Response[emptypb.Empty], error)
	CreateResource(context.Context, *connect.Request[rbacpb.CreateResourceIn]) (*connect.Response[emptypb.Empty], error)
	ListResources(context.Context, *connect.Request[rbacpb.ListResourcesIn]) (*connect.Response[rbacpb.ListResourcesOut], error)
	DeleteResource(context.Context, *connect.Request[rbacpb.DeleteResourceIn]) (*connect.Response[emptypb.Empty], error)
	AssignRole(context.Context, *connect.Request[rbacpb.AssignRoleIn]) (*connect.Response[emptypb.Empty], error)
	RevokeRole(context.Context, *connect.Request[rbacpb.RevokeRoleIn]) (*connect.Response[emptypb.Empty], error)
	GrantPerm(context.Context, *connect.Request[rbacpb.GrantPermIn]) (*connect.Response[emptypb.Empty], error)
	RevokePerm(context.Context, *connect.Request[rbacpb.RevokePermIn]) (*connect.Response[emptypb.Empty], error)
}

// NewRbacServiceClient constructs a client for the authzpb.rbacpb.RbacService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRbacServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RbacServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	rbacServiceMethods := rbacpb.File_authzpb_rbacpb_rbac_proto.Services().ByName("RbacService").Methods()
	return &rbacServiceClient{
		listUsers: connect.NewClient[rbacpb.ListUsersIn, rbacpb.ListUsersOut](
			httpClient,
			baseURL+RbacServiceListUsersProcedure,
			connect.WithSchema(rbacServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[rbacpb.UpdateUserIn, emptypb.Empty](
			httpClient,
			baseURL+RbacServiceUpdateUserProcedure,
			connect.WithSchema(rbacServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[rbacpb.DeleteUserIn, emptypb.Empty](
			httpClient,
			baseURL+RbacServiceDeleteUserProcedure,
			connect.WithSchema(rbacServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		createRole: connect.NewClient[rbacpb.CreateRoleIn, emptypb.Empty](
			httpClient,
			baseURL+RbacServiceCreateRoleProcedure,
			connect.WithSchema(rbacServiceMethods.ByName("CreateRole")),
			connect.WithClientOptions(opts...),
		),
		listRoles: connect.NewClient[rbacpb.ListRolesIn, rbacpb.ListRolesOut](
			httpClient,
			baseURL+RbacServiceListRolesProcedure,
			connect.WithSchema(rbacServiceMethods.ByName("ListRoles")),
			connect.WithClientOptions(opts...),
		),
		updateRole: connect.NewClient[rbacpb.UpdateRoleIn, emptypb.Empty](
			httpClient,
			baseURL+RbacServiceUpdateRoleProcedure,
			connect.WithSchema(rbacServiceMethods.ByName("UpdateRole")),
			connect.WithClientOptions(opts...),
		),
		deleteRole: connect.NewClient[rbacpb.DeleteRoleIn, emptypb.Empty](
			httpClient,
			baseURL+RbacServiceDeleteRoleProcedure,
			connect.WithSchema(rbacServiceMethods.ByName("DeleteRole")),
			connect.WithClientOptions(opts...),
		),
		createResource: connect.NewClient[rbacpb.CreateResourceIn, emptypb.Empty](
			httpClient,
			baseURL+RbacServiceCreateResourceProcedure,
			connect.WithSchema(rbacServiceMethods.ByName("CreateResource")),
			connect.WithClientOptions(opts...),
		),
		listResources: connect.NewClient[rbacpb.ListResourcesIn, rbacpb.ListResourcesOut](
			httpClient,
			baseURL+RbacServiceListResourcesProcedure,
			connect.WithSchema(rbacServiceMethods.ByName("ListResources")),
			connect.WithClientOptions(opts...),
		),
		deleteResource: connect.NewClient[rbacpb.DeleteResourceIn, emptypb.Empty](
			httpClient,
			baseURL+RbacServiceDeleteResourceProcedure,
			connect.WithSchema(rbacServiceMethods.ByName("DeleteResource")),
			connect.WithClientOptions(opts...),
		),
		assignRole: connect.NewClient[rbacpb.AssignRoleIn, emptypb.Empty](
			httpClient,
			baseURL+RbacServiceAssignRoleProcedure,
			connect.WithSchema(rbacServiceMethods.ByName("AssignRole")),
			connect.WithClientOptions(opts...),
		),
		revokeRole: connect.NewClient[rbacpb.RevokeRoleIn, emptypb.Empty](
			httpClient,
			baseURL+RbacServiceRevokeRoleProcedure,
			connect.WithSchema(rbacServiceMethods.ByName("RevokeRole")),
			connect.WithClientOptions(opts...),
		),
		grantPerm: connect.NewClient[rbacpb.GrantPermIn, emptypb.Empty](
			httpClient,
			baseURL+RbacServiceGrantPermProcedure,
			connect.WithSchema(rbacServiceMethods.ByName("GrantPerm")),
			connect.WithClientOptions(opts...),
		),
		revokePerm: connect.NewClient[rbacpb.RevokePermIn, emptypb.Empty](
			httpClient,
			baseURL+RbacServiceRevokePermProcedure,
			connect.WithSchema(rbacServiceMethods.ByName("RevokePerm")),
			connect.WithClientOptions(opts...),
		),
	}
}

// rbacServiceClient implements RbacServiceClient.
type rbacServiceClient struct {
	listUsers      *connect.Client[rbacpb.ListUsersIn, rbacpb.ListUsersOut]
	updateUser     *connect.Client[rbacpb.UpdateUserIn, emptypb.Empty]
	deleteUser     *connect.Client[rbacpb.DeleteUserIn, emptypb.Empty]
	createRole     *connect.Client[rbacpb.CreateRoleIn, emptypb.Empty]
	listRoles      *connect.Client[rbacpb.ListRolesIn, rbacpb.ListRolesOut]
	updateRole     *connect.Client[rbacpb.UpdateRoleIn, emptypb.Empty]
	deleteRole     *connect.Client[rbacpb.DeleteRoleIn, emptypb.Empty]
	createResource *connect.Client[rbacpb.CreateResourceIn, emptypb.Empty]
	listResources  *connect.Client[rbacpb.ListResourcesIn, rbacpb.ListResourcesOut]
	deleteResource *connect.Client[rbacpb.DeleteResourceIn, emptypb.Empty]
	assignRole     *connect.Client[rbacpb.AssignRoleIn, emptypb.Empty]
	revokeRole     *connect.Client[rbacpb.RevokeRoleIn, emptypb.Empty]
	grantPerm      *connect.Client[rbacpb.GrantPermIn, emptypb.Empty]
	revokePerm     *connect.Client[rbacpb.RevokePermIn, emptypb.Empty]
}

// ListUsers calls authzpb.rbacpb.RbacService.ListUsers.
func (c *rbacServiceClient) ListUsers(ctx context.Context, req *connect.Request[rbacpb.ListUsersIn]) (*connect.Response[rbacpb.ListUsersOut], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// UpdateUser calls authzpb.rbacpb.RbacService.UpdateUser.
func (c *rbacServiceClient) UpdateUser(ctx context.Context, req *connect.Request[rbacpb.UpdateUserIn]) (*connect.Response[emptypb.Empty], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls authzpb.rbacpb.RbacService.DeleteUser.
func (c *rbacServiceClient) DeleteUser(ctx context.Context, req *connect.Request[rbacpb.DeleteUserIn]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// CreateRole calls authzpb.rbacpb.RbacService.CreateRole.
func (c *rbacServiceClient) CreateRole(ctx context.Context, req *connect.Request[rbacpb.CreateRoleIn]) (*connect.Response[emptypb.Empty], error) {
	return c.createRole.CallUnary(ctx, req)
}

// ListRoles calls authzpb.rbacpb.RbacService.ListRoles.
func (c *rbacServiceClient) ListRoles(ctx context.Context, req *connect.Request[rbacpb.ListRolesIn]) (*connect.Response[rbacpb.ListRolesOut], error) {
	return c.listRoles.CallUnary(ctx, req)
}

// UpdateRole calls authzpb.rbacpb.RbacService.UpdateRole.
func (c *rbacServiceClient) UpdateRole(ctx context.Context, req *connect.Request[rbacpb.UpdateRoleIn]) (*connect.Response[emptypb.Empty], error) {
	return c.updateRole.CallUnary(ctx, req)
}

// DeleteRole calls authzpb.rbacpb.RbacService.DeleteRole.
func (c *rbacServiceClient) DeleteRole(ctx context.Context, req *connect.Request[rbacpb.DeleteRoleIn]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteRole.CallUnary(ctx, req)
}

// CreateResource calls authzpb.rbacpb.RbacService.CreateResource.
func (c *rbacServiceClient) CreateResource(ctx context.Context, req *connect.Request[rbacpb.CreateResourceIn]) (*connect.Response[emptypb.Empty], error) {
	return c.createResource.CallUnary(ctx, req)
}

// ListResources calls authzpb.rbacpb.RbacService.ListResources.
func (c *rbacServiceClient) ListResources(ctx context.Context, req *connect.Request[rbacpb.ListResourcesIn]) (*connect.Response[rbacpb.ListResourcesOut], error) {
	return c.listResources.CallUnary(ctx, req)
}

// DeleteResource calls authzpb.rbacpb.RbacService.DeleteResource.
func (c *rbacServiceClient) DeleteResource(ctx context.Context, req *connect.Request[rbacpb.DeleteResourceIn]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteResource.CallUnary(ctx, req)
}

// AssignRole calls authzpb.rbacpb.RbacService.AssignRole.
func (c *rbacServiceClient) AssignRole(ctx context.Context, req *connect.Request[rbacpb.AssignRoleIn]) (*connect.Response[emptypb.Empty], error) {
	return c.assignRole.CallUnary(ctx, req)
}

// RevokeRole calls authzpb.rbacpb.RbacService.RevokeRole.
func (c *rbacServiceClient) RevokeRole(ctx context.Context, req *connect.Request[rbacpb.RevokeRoleIn]) (*connect.Response[emptypb.Empty], error) {
	return c.revokeRole.CallUnary(ctx, req)
}

// GrantPerm calls authzpb.rbacpb.RbacService.GrantPerm.
func (c *rbacServiceClient) GrantPerm(ctx context.Context, req *connect.Request[rbacpb.GrantPermIn]) (*connect.Response[emptypb.Empty], error) {
	return c.grantPerm.CallUnary(ctx, req)
}

// RevokePerm calls authzpb.rbacpb.RbacService.RevokePerm.
func (c *rbacServiceClient) RevokePerm(ctx context.Context, req *connect.Request[rbacpb.RevokePermIn]) (*connect.Response[emptypb.Empty], error) {
	return c.revokePerm.CallUnary(ctx, req)
}

// RbacServiceHandler is an implementation of the authzpb.rbacpb.RbacService service.
type RbacServiceHandler interface {
	ListUsers(context.Context, *connect.Request[rbacpb.ListUsersIn]) (*connect.Response[rbacpb.ListUsersOut], error)
	UpdateUser(context.Context, *connect.Request[rbacpb.UpdateUserIn]) (*connect.Response[emptypb.Empty], error)
	DeleteUser(context.Context, *connect.Request[rbacpb.DeleteUserIn]) (*connect.Response[emptypb.Empty], error)
	CreateRole(context.Context, *connect.Request[rbacpb.CreateRoleIn]) (*connect.Response[emptypb.Empty], error)
	ListRoles(context.Context, *connect.Request[rbacpb.ListRolesIn]) (*connect.Response[rbacpb.ListRolesOut], error)
	UpdateRole(context.Context, *connect.Request[rbacpb.UpdateRoleIn]) (*connect.Response[emptypb.Empty], error)
	DeleteRole(context.Context, *connect.Request[rbacpb.DeleteRoleIn]) (*connect.Response[emptypb.Empty], error)
	CreateResource(context.Context, *connect.Request[rbacpb.CreateResourceIn]) (*connect.Response[emptypb.Empty], error)
	ListResources(context.Context, *connect.Request[rbacpb.ListResourcesIn]) (*connect.Response[rbacpb.ListResourcesOut], error)
	DeleteResource(context.Context, *connect.Request[rbacpb.DeleteResourceIn]) (*connect.Response[emptypb.Empty], error)
	AssignRole(context.Context, *connect.Request[rbacpb.AssignRoleIn]) (*connect.Response[emptypb.Empty], error)
	RevokeRole(context.Context, *connect.Request[rbacpb.RevokeRoleIn]) (*connect.Response[emptypb.Empty], error)
	GrantPerm(context.Context, *connect.Request[rbacpb.GrantPermIn]) (*connect.Response[emptypb.Empty], error)
	RevokePerm(context.Context, *connect.Request[rbacpb.RevokePermIn]) (*connect.Response[emptypb.Empty], error)
}

// NewRbacServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRbacServiceHandler(svc RbacServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	rbacServiceMethods := rbacpb.File_authzpb_rbacpb_rbac_proto.Services().ByName("RbacService").Methods()
	rbacServiceListUsersHandler := connect.NewUnaryHandler(
		RbacServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(rbacServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	rbacServiceUpdateUserHandler := connect.NewUnaryHandler(
		RbacServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(rbacServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	rbacServiceDeleteUserHandler := connect.NewUnaryHandler(
		RbacServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(rbacServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	rbacServiceCreateRoleHandler := connect.NewUnaryHandler(
		RbacServiceCreateRoleProcedure,
		svc.CreateRole,
		connect.WithSchema(rbacServiceMethods.ByName("CreateRole")),
		connect.WithHandlerOptions(opts...),
	)
	rbacServiceListRolesHandler := connect.NewUnaryHandler(
		RbacServiceListRolesProcedure,
		svc.ListRoles,
		connect.WithSchema(rbacServiceMethods.ByName("ListRoles")),
		connect.WithHandlerOptions(opts...),
	)
	rbacServiceUpdateRoleHandler := connect.NewUnaryHandler(
		RbacServiceUpdateRoleProcedure,
		svc.UpdateRole,
		connect.WithSchema(rbacServiceMethods.ByName("UpdateRole")),
		connect.WithHandlerOptions(opts...),
	)
	rbacServiceDeleteRoleHandler := connect.NewUnaryHandler(
		RbacServiceDeleteRoleProcedure,
		svc.DeleteRole,
		connect.WithSchema(rbacServiceMethods.ByName("DeleteRole")),
		connect.WithHandlerOptions(opts...),
	)
	rbacServiceCreateResourceHandler := connect.NewUnaryHandler(
		RbacServiceCreateResourceProcedure,
		svc.CreateResource,
		connect.WithSchema(rbacServiceMethods.ByName("CreateResource")),
		connect.WithHandlerOptions(opts...),
	)
	rbacServiceListResourcesHandler := connect.NewUnaryHandler(
		RbacServiceListResourcesProcedure,
		svc.ListResources,
		connect.WithSchema(rbacServiceMethods.ByName("ListResources")),
		connect.WithHandlerOptions(opts...),
	)
	rbacServiceDeleteResourceHandler := connect.NewUnaryHandler(
		RbacServiceDeleteResourceProcedure,
		svc.DeleteResource,
		connect.WithSchema(rbacServiceMethods.ByName("DeleteResource")),
		connect.WithHandlerOptions(opts...),
	)
	rbacServiceAssignRoleHandler := connect.NewUnaryHandler(
		RbacServiceAssignRoleProcedure,
		svc.AssignRole,
		connect.WithSchema(rbacServiceMethods.ByName("AssignRole")),
		connect.WithHandlerOptions(opts...),
	)
	rbacServiceRevokeRoleHandler := connect.NewUnaryHandler(
		RbacServiceRevokeRoleProcedure,
		svc.RevokeRole,
		connect.WithSchema(rbacServiceMethods.ByName("RevokeRole")),
		connect.WithHandlerOptions(opts...),
	)
	rbacServiceGrantPermHandler := connect.NewUnaryHandler(
		RbacServiceGrantPermProcedure,
		svc.GrantPerm,
		connect.WithSchema(rbacServiceMethods.ByName("GrantPerm")),
		connect.WithHandlerOptions(opts...),
	)
	rbacServiceRevokePermHandler := connect.NewUnaryHandler(
		RbacServiceRevokePermProcedure,
		svc.RevokePerm,
		connect.WithSchema(rbacServiceMethods.ByName("RevokePerm")),
		connect.WithHandlerOptions(opts...),
	)
	return "/authzpb.rbacpb.RbacService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RbacServiceListUsersProcedure:
			rbacServiceListUsersHandler.ServeHTTP(w, r)
		case RbacServiceUpdateUserProcedure:
			rbacServiceUpdateUserHandler.ServeHTTP(w, r)
		case RbacServiceDeleteUserProcedure:
			rbacServiceDeleteUserHandler.ServeHTTP(w, r)
		case RbacServiceCreateRoleProcedure:
			rbacServiceCreateRoleHandler.ServeHTTP(w, r)
		case RbacServiceListRolesProcedure:
			rbacServiceListRolesHandler.ServeHTTP(w, r)
		case RbacServiceUpdateRoleProcedure:
			rbacServiceUpdateRoleHandler.ServeHTTP(w, r)
		case RbacServiceDeleteRoleProcedure:
			rbacServiceDeleteRoleHandler.ServeHTTP(w, r)
		case RbacServiceCreateResourceProcedure:
			rbacServiceCreateResourceHandler.ServeHTTP(w, r)
		case RbacServiceListResourcesProcedure:
			rbacServiceListResourcesHandler.ServeHTTP(w, r)
		case RbacServiceDeleteResourceProcedure:
			rbacServiceDeleteResourceHandler.ServeHTTP(w, r)
		case RbacServiceAssignRoleProcedure:
			rbacServiceAssignRoleHandler.ServeHTTP(w, r)
		case RbacServiceRevokeRoleProcedure:
			rbacServiceRevokeRoleHandler.ServeHTTP(w, r)
		case RbacServiceGrantPermProcedure:
			rbacServiceGrantPermHandler.ServeHTTP(w, r)
		case RbacServiceRevokePermProcedure:
			rbacServiceRevokePermHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRbacServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRbacServiceHandler struct{}

func (UnimplementedRbacServiceHandler) ListUsers(context.Context, *connect.Request[rbacpb.ListUsersIn]) (*connect.Response[rbacpb.ListUsersOut], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.rbacpb.RbacService.ListUsers is not implemented"))
}

func (UnimplementedRbacServiceHandler) UpdateUser(context.Context, *connect.Request[rbacpb.UpdateUserIn]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.rbacpb.RbacService.UpdateUser is not implemented"))
}

func (UnimplementedRbacServiceHandler) DeleteUser(context.Context, *connect.Request[rbacpb.DeleteUserIn]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.rbacpb.RbacService.DeleteUser is not implemented"))
}

func (UnimplementedRbacServiceHandler) CreateRole(context.Context, *connect.Request[rbacpb.CreateRoleIn]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.rbacpb.RbacService.CreateRole is not implemented"))
}

func (UnimplementedRbacServiceHandler) ListRoles(context.Context, *connect.Request[rbacpb.ListRolesIn]) (*connect.Response[rbacpb.ListRolesOut], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.rbacpb.RbacService.ListRoles is not implemented"))
}

func (UnimplementedRbacServiceHandler) UpdateRole(context.Context, *connect.Request[rbacpb.UpdateRoleIn]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.rbacpb.RbacService.UpdateRole is not implemented"))
}

func (UnimplementedRbacServiceHandler) DeleteRole(context.Context, *connect.Request[rbacpb.DeleteRoleIn]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.rbacpb.RbacService.DeleteRole is not implemented"))
}

func (UnimplementedRbacServiceHandler) CreateResource(context.Context, *connect.Request[rbacpb.CreateResourceIn]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.rbacpb.RbacService.CreateResource is not implemented"))
}

func (UnimplementedRbacServiceHandler) ListResources(context.Context, *connect.Request[rbacpb.ListResourcesIn]) (*connect.Response[rbacpb.ListResourcesOut], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.rbacpb.RbacService.ListResources is not implemented"))
}

func (UnimplementedRbacServiceHandler) DeleteResource(context.Context, *connect.Request[rbacpb.DeleteResourceIn]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.rbacpb.RbacService.DeleteResource is not implemented"))
}

func (UnimplementedRbacServiceHandler) AssignRole(context.Context, *connect.Request[rbacpb.AssignRoleIn]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.rbacpb.RbacService.AssignRole is not implemented"))
}

func (UnimplementedRbacServiceHandler) RevokeRole(context.Context, *connect.Request[rbacpb.RevokeRoleIn]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.rbacpb.RbacService.RevokeRole is not implemented"))
}

func (UnimplementedRbacServiceHandler) GrantPerm(context.Context, *connect.Request[rbacpb.GrantPermIn]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.rbacpb.RbacService.GrantPerm is not implemented"))
}

func (UnimplementedRbacServiceHandler) RevokePerm(context.Context, *connect.Request[rbacpb.RevokePermIn]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("authzpb.rbacpb.RbacService.RevokePerm is not implemented"))
}
